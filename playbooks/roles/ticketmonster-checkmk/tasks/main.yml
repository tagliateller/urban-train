---
- name: include os-specific variables
  include_vars: "{{ ansible_os_family }}.yml"

- include: setup-redhat.yml
  when: ansible_os_family == "RedHat"

- name: enable and start xinetd
  service: name=xinetd enabled=yes state=started

- name: create omdistro site
  command: omd create {{ omdistro_site }} creates=/opt/omd/sites/{{ omdistro_site }}

- name: enable seboolean httpd_can_network_connect
  seboolean: name=httpd_can_network_connect state=on persistent=yes
  when: ansible_selinux.status is defined and ansible_selinux.status == 'enabled'

- name: get omd configuration details
  omdistro_facts: name={{ omdistro_site }}

- name: configure omd
  command: omd config {{ omdistro_site }} set {{ item.name }} {{ item.value }}
  when: omdistro_site_facts[item.name] is defined and omdistro_site_facts[item.name] != item.value
  with_items: "{{ omdistro_site_config }}"
  notify: restart omd

- name: start omd
  service: name=omd state=started enabled=yes

- name: make sure apache redirects to ssl
  when: omdistro_use_ssl
  template: >-
      src=00-use-ssl.conf.j2
      dest={{ omdistro_apache_confdir }}/00-use-ssl.conf
      owner=root
      group=root
      mode=0644
  notify: restart apache

- name: template thruk_local.conf
  template: >-
      src=thruk_local.conf.j2
      dest=/opt/omd/sites/{{ omdistro_site }}/etc/thruk/thruk_local.conf
      owner={{ omdistro_site }}
      group={{ omdistro_site }}
      backup=yes

- name: template thruk menu_local.conf to add wato
  template: >-
      src=menu_local.conf.j2
      dest=/opt/omd/sites/{{ omdistro_site }}/etc/thruk/menu_local.conf
      owner={{ omdistro_site }}
      group={{ omdistro_site }}
      backup=yes

- name: template timeperiods.cfg
  template: >
      src=timeperiods.cfg.j2
      dest=/opt/omd/sites/{{ omdistro_site }}/etc/nagios/conf.d/timeperiods.cfg
      owner={{ omdistro_site }}
      group={{ omdistro_site }}
      backup=yes

- name: template hosts.mk
  template: >
      src=hosts.mk.j2
      dest=/opt/omd/sites/{{ omdistro_site }}/etc/check_mk/conf.d/hosts.mk
      owner={{ omdistro_site }}
      group={{ omdistro_site }}
      backup=yes
  notify: cmk inventory

- name: template groups.mk
  template: >
      src=groups.mk.j2
      dest=/opt/omd/sites/{{ omdistro_site }}/etc/check_mk/conf.d/groups.mk
      owner={{ omdistro_site }}
      group={{ omdistro_site }}
      backup=yes
  notify: cmk reload

- name: template main.mk
  template: >
      src=main.mk.j2
      dest=/opt/omd/sites/{{ omdistro_site }}/etc/check_mk/main.mk
      owner={{ omdistro_site }}
      group={{ omdistro_site }}
      backup=yes
  notify: cmk reload

- name: stat wato contacts.mk
  stat: path=/opt/omd/sites/{{ omdistro_site }}/etc/check_mk/conf.d/wato/contacts.mk
  register: stat_wato_contacts

- name: template wato contacts.mk if does not exist
  template: >-
      src=wato_contacts.mk.j2
      dest=/opt/omd/sites/{{ omdistro_site }}/etc/check_mk/conf.d/wato/contacts.mk
      owner={{ omdistro_site }}
      group={{ omdistro_site }}
      backup=yes
  when: not stat_wato_contacts.stat.exists
  notify: cmk reload

- name: stat multisite wato users.mk
  stat: path=/opt/omd/sites/{{ omdistro_site }}/etc/check_mk/multisite.d/wato/users.mk
  register: stat_wato_users

- name: template users.mk if does not exist
  template: >-
      src=wato_users.mk.j2
      dest=/opt/omd/sites/{{ omdistro_site }}/etc/check_mk/multisite.d/wato/users.mk
      owner={{ omdistro_site }}
      group={{ omdistro_site }}
      backup=yes
  when: not stat_wato_users.stat.exists

- name: scan for parent/child relationships
  command: su -c "cmk --scan-parents" -l {{omdistro_site}}
  when: omdistro_scan_parents
