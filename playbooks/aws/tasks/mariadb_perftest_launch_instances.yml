---
# (ami-6d1c2007) centos 7 - us-east-1
# (ami-af4333cf) centos 8 - us-west-1

- name: debug vars
  debug: var=aws_region

# Anlage der Security Group (DB-Server)
- name: ec2 security group server
  ec2_group:
    name: tpcc-security-group-server
    description: Group for TicketMonster Example
#    vpc_id: 12345
    region: "{{ aws_region }}"
    rules:
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: "{{ myip.stdout }}/32"
      - proto: tcp
        from_port: 3306
        to_port: 3306
        cidr_ip: 0.0.0.0/0
    rules_egress:
      - proto: all
        cidr_ip: 0.0.0.0/0

# Anlage der Security Group (DB-Client)
- name: ec2 security group client
  ec2_group:
    name: tpcc-security-group-client
    description: Group for TicketMonster Example
#    vpc_id: 12345
    region: "{{ aws_region }}"
    rules:
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: "{{ myip.stdout }}/32"
    rules_egress:
      - proto: all
        cidr_ip: 0.0.0.0/0

# VM deployen
- name: Provision a set of instances
  ec2:
    group: tpcc-security-group-server
    key_name: "{{ ssh_key_name }}"
    instance_type: "{{ server_machine_size }}"
    image: "ami-af4333cf"
    wait: true
    region: "{{ aws_region }}"
    count: "{{ instances | length }}"
    instance_tags:
      group: "{{ instance_type }}"
  register: ec2

- name: Volume für DB (/var/lib/mysql)
  ec2_vol:
    instance: "{{ item.id }}"
    device_name: /dev/xvdf
    volume_size: 120 GB
  with_items: ec2.instances
  register: ec2_vol
  
- name: Volume für Backup (/backup)
  ec2_vol:
    instance: "{{ item.id }}"
    device_name: /dev/xvdm
    snapshot: snap-a2f99a23 # 80 GiB tpcc_backup_ohne_indizes
  with_items: ec2.instances
  register: ec2_vol

- name: add Name tag to instances
  ec2_tag: resource={{ item.1.id }} region="{{ aws_region }}" state=present
  with_together:
    - instances
    - ec2.instances
  args: 
    tags:
      Name: "{{ item.0 }}"

- name: Wait for ssh
  wait_for: "port=22 host={{ item.dns_name }}"
  with_items: ec2.instances

- name: Wait for user setup
  command: "ssh -o StrictHostKeyChecking=no -o PasswordAuthentication=no -o ConnectTimeout=10 -o UserKnownHostsFile=/dev/null {{ ansible_ssh_user }}@{{ item.1.dns_name }} echo {{ ansible_ssh_user }} user is setup"
  register: result
  until: result.rc == 0
  retries: 20
  delay: 10
  with_together:
  - instances
  - ec2.instances
